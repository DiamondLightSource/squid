// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetDevicesDevicesGetData, GetDevicesDevicesGetResponse, GetDeviceByNameDevicesNameGetData, GetDeviceByNameDevicesNameGetResponse, GetDeviceByNameDevicesNameGetError, DeleteEnvironmentEnvironmentDeleteData, DeleteEnvironmentEnvironmentDeleteResponse, GetEnvironmentEnvironmentGetData, GetEnvironmentEnvironmentGetResponse, GetPlansPlansGetData, GetPlansPlansGetResponse, GetPlanByNamePlansNameGetData, GetPlanByNamePlansNameGetResponse, GetPlanByNamePlansNameGetError, GetTasksTasksGetData, GetTasksTasksGetResponse, GetTasksTasksGetError, SubmitTaskTasksPostData, SubmitTaskTasksPostResponse, SubmitTaskTasksPostError, DeleteSubmittedTaskTasksTaskIdDeleteData, DeleteSubmittedTaskTasksTaskIdDeleteResponse, DeleteSubmittedTaskTasksTaskIdDeleteError, GetTaskTasksTaskIdGetData, GetTaskTasksTaskIdGetResponse, GetTaskTasksTaskIdGetError, GetStateWorkerStateGetData, GetStateWorkerStateGetResponse, SetStateWorkerStatePutData, SetStateWorkerStatePutResponse, SetStateWorkerStatePutError, GetActiveTaskWorkerTaskGetData, GetActiveTaskWorkerTaskGetResponse, SetActiveTaskWorkerTaskPutData, SetActiveTaskWorkerTaskPutResponse, SetActiveTaskWorkerTaskPutError } from './blueapi/types.gen';
import { blueapiClient as _heyApiClient } from './blueapi/client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Devices
 * Retrieve information about all available devices.
 */
export const getDevicesDevicesGet = <ThrowOnError extends boolean = false>(options?: Options<GetDevicesDevicesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDevicesDevicesGetResponse, unknown, ThrowOnError>({
        url: '/devices',
        ...options
    });
};

/**
 * Get Device By Name
 * Retrieve information about a devices by its (unique) name.
 */
export const getDeviceByNameDevicesNameGet = <ThrowOnError extends boolean = false>(options: Options<GetDeviceByNameDevicesNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceByNameDevicesNameGetResponse, GetDeviceByNameDevicesNameGetError, ThrowOnError>({
        url: '/devices/{name}',
        ...options
    });
};

/**
 * Delete Environment
 * Delete the current environment, causing internal components to be reloaded.
 */
export const deleteEnvironmentEnvironmentDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteEnvironmentEnvironmentDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteEnvironmentEnvironmentDeleteResponse, unknown, ThrowOnError>({
        url: '/environment',
        ...options
    });
};

/**
 * Get Environment
 * Get the current state of the environment, i.e. initialization state.
 */
export const getEnvironmentEnvironmentGet = <ThrowOnError extends boolean = false>(options?: Options<GetEnvironmentEnvironmentGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEnvironmentEnvironmentGetResponse, unknown, ThrowOnError>({
        url: '/environment',
        ...options
    });
};

/**
 * Get Plans
 * Retrieve information about all available plans.
 */
export const getPlansPlansGet = <ThrowOnError extends boolean = false>(options?: Options<GetPlansPlansGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlansPlansGetResponse, unknown, ThrowOnError>({
        url: '/plans',
        ...options
    });
};

/**
 * Get Plan By Name
 * Retrieve information about a plan by its (unique) name.
 */
export const getPlanByNamePlansNameGet = <ThrowOnError extends boolean = false>(options: Options<GetPlanByNamePlansNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlanByNamePlansNameGetResponse, GetPlanByNamePlansNameGetError, ThrowOnError>({
        url: '/plans/{name}',
        ...options
    });
};

/**
 * Get Tasks
 * Retrieve tasks based on their status.
 * The status of a newly created task is 'unstarted'.
 */
export const getTasksTasksGet = <ThrowOnError extends boolean = false>(options?: Options<GetTasksTasksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTasksTasksGetResponse, GetTasksTasksGetError, ThrowOnError>({
        url: '/tasks',
        ...options
    });
};

/**
 * Submit Task
 * Submit a task to the worker.
 */
export const submitTaskTasksPost = <ThrowOnError extends boolean = false>(options: Options<SubmitTaskTasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitTaskTasksPostResponse, SubmitTaskTasksPostError, ThrowOnError>({
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Submitted Task
 */
export const deleteSubmittedTaskTasksTaskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmittedTaskTasksTaskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubmittedTaskTasksTaskIdDeleteResponse, DeleteSubmittedTaskTasksTaskIdDeleteError, ThrowOnError>({
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Get Task
 * Retrieve a task
 */
export const getTaskTasksTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskTasksTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskTasksTaskIdGetResponse, GetTaskTasksTaskIdGetError, ThrowOnError>({
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Get State
 * Get the State of the Worker
 */
export const getStateWorkerStateGet = <ThrowOnError extends boolean = false>(options?: Options<GetStateWorkerStateGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStateWorkerStateGetResponse, unknown, ThrowOnError>({
        url: '/worker/state',
        ...options
    });
};

/**
 * Set State
 * Request that the worker is put into a particular state.
 * Returns the state of the worker at the end of the call.
 *
 * - **The following transitions are allowed and return 202: Accepted**
 * - If the worker is **PAUSED**, new_state may be **RUNNING** to resume.
 * - If the worker is **RUNNING**, new_state may be **PAUSED** to pause:
 * - If defer is False (default): pauses and rewinds to the previous checkpoint
 * - If defer is True: waits until the next checkpoint to pause
 * - **If the task has no checkpoints, the task will instead be Aborted**
 * - If the worker is **RUNNING/PAUSED**, new_state may be **STOPPING** to stop.
 * Stop marks any currently open Runs in the Task as a success and ends the task.
 * - If the worker is **RUNNING/PAUSED**, new_state may be **ABORTING** to abort.
 * Abort marks any currently open Runs in the Task as a Failure and ends the task.
 * - If reason is set, the reason will be passed as the reason for the Run failure.
 * - **All other transitions return 400: Bad Request**
 */
export const setStateWorkerStatePut = <ThrowOnError extends boolean = false>(options: Options<SetStateWorkerStatePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetStateWorkerStatePutResponse, SetStateWorkerStatePutError, ThrowOnError>({
        url: '/worker/state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Active Task
 */
export const getActiveTaskWorkerTaskGet = <ThrowOnError extends boolean = false>(options?: Options<GetActiveTaskWorkerTaskGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetActiveTaskWorkerTaskGetResponse, unknown, ThrowOnError>({
        url: '/worker/task',
        ...options
    });
};

/**
 * Set Active Task
 * Set a task to active status, the worker should begin it as soon as possible.
 * This will return an error response if the worker is not idle.
 */
export const setActiveTaskWorkerTaskPut = <ThrowOnError extends boolean = false>(options: Options<SetActiveTaskWorkerTaskPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetActiveTaskWorkerTaskPutResponse, SetActiveTaskWorkerTaskPutError, ThrowOnError>({
        url: '/worker/task',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};